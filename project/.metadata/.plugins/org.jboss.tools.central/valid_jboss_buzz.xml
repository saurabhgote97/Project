<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>First alpha of JGroups 5.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JxJeRrg6d1s/first-alpha-of-jgroups-50.html" /><category term="feed_group_name_jgroups" scheme="searchisko:content:tags" /><category term="feed_name_belasblog" scheme="searchisko:content:tags" /><category term="jgroups 5 message types" scheme="searchisko:content:tags" /><author><name>Bela Ban</name></author><id>searchisko:content:id:jbossorg_blog-first_alpha_of_jgroups_5_0</id><updated>2020-01-28T09:14:35Z</updated><published>2020-01-28T09:14:00Z</published><content type="html">Howdy folks!&lt;br /&gt;&lt;br /&gt;Today I'm very happy to announce the first alpha version of JGroups 5.0!&lt;br /&gt;&lt;br /&gt;JGroups 5.0 has major API changes and I'd like people to try it out and give feedback before we release final.&lt;br /&gt;&lt;br /&gt;Note that there might still be more API changes before the first beta.&lt;br /&gt;&lt;br /&gt;So what's new in 5?&lt;br /&gt;&lt;br /&gt;The biggest change is that Message is now an interface [1] and we have a number of message classes implementing it, e.g.:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/BytesMessage.java"&gt;BytesMessage&lt;/a&gt;: this is the replacement for the old 4.x Message class, having a byte array as payload.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/ObjectMessage.java"&gt;ObjectMessage&lt;/a&gt;: accepts an object as payload.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/NioMessage.java"&gt;NioMessage&lt;/a&gt;: has an NIO ByteBuffer as payload.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/EmptyMessage.java"&gt;EmptyMessage&lt;/a&gt;: this class has *no* payload at all! Useful when sending around messages that have only headers, e.g. heartbeats. Used mainly by JGroups internally. This class has a smaller memory footprint.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/CompositeMessage.java"&gt;CompositeMessage&lt;/a&gt;: message type which carries other messages&lt;/li&gt;&lt;/ul&gt;The advantage is different message types is that rather than having to marshal payloads into a byte array, as in 4.x Messages, the payload is now added to the message without marshalling. Marshalling is only done just before sending the message on the network.&lt;br /&gt;&lt;br /&gt;This &lt;a href="http://www.jgroups.org/manual5/index.html#_late_marshalling"&gt;late marshalling&lt;/a&gt; saves one memory allocation.&lt;br /&gt;&lt;br /&gt;The other advantage is that applications can &lt;a href="http://www.jgroups.org/manual5/index.html#MessageFactory"&gt;register their own messages types&lt;/a&gt;. This means that we can control how a message is created, e.g. using off-heap memory rather than heap memory.&lt;br /&gt;&lt;br /&gt;Other changes include:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;I've removed a lot of deprecated cruft, e.g. several AuthToken implementations, SASL, S3_PING and GOOGLE_PING (they have better replacements).&lt;/li&gt;&lt;li&gt;Java 11 is now the baseline. The current Alpha1 still runs under Java 8, but I expect this to change, perhaps only with 5.1. But at least, I reserve the right to use Java 11 specific language features, so be warned :-)&lt;/li&gt;&lt;/ul&gt;The full list of 5.0 is here: [2].&lt;br /&gt;&lt;br /&gt;I still have a few JIRAs to resolve before releasing 5.0.0.Final, and then I'll add new functionality (without API changes) in a bunch of minor releases. I've planned 5.1 - 5.3 so far.&lt;br /&gt;&lt;br /&gt;The documentation is here: [3].&lt;br /&gt;&lt;br /&gt;For feedback please use the &lt;a href="http://groups.google.com/forum/#!forum/jgroups-dev"&gt;mailing list&lt;/a&gt; [4].&lt;br /&gt;&lt;br /&gt;Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] &lt;a href="http://www.jgroups.org/manual5/index.html#Message"&gt;http://www.jgroups.org/manual5/index.html#Message&lt;/a&gt;&lt;br /&gt;[2] &lt;a href="https://issues.redhat.com/projects/JGRP/versions/12334686"&gt;https://issues.redhat.com/projects/JGRP/versions/12334686&lt;/a&gt;&lt;br /&gt;[3] &lt;a href="http://www.jgroups.org/manual5/index.html"&gt;http://www.jgroups.org/manual5/index.html&lt;/a&gt;&lt;br /&gt;[4] &lt;a href="http://groups.google.com/forum/#!forum/jgroups-dev"&gt;http://groups.google.com/forum/#!forum/jgroups-dev&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JxJeRrg6d1s" height="1" width="1" alt=""/&gt;</content><summary>Howdy folks! Today I'm very happy to announce the first alpha version of JGroups 5.0! JGroups 5.0 has major API changes and I'd like people to try it out and give feedback before we release final. Note that there might still be more API changes before the first beta. So what's new in 5? The biggest change is that Message is now an interface [1] and we have a number of message classes implementing ...</summary><dc:creator>Bela Ban</dc:creator><dc:date>2020-01-28T09:14:00Z</dc:date><feedburner:origLink>http://belaban.blogspot.com/2020/01/first-alpha-of-jgroups-50.html</feedburner:origLink></entry><entry><title>Use Red Hat OpenShift’s built-in OAuth server as an authentication provider in Open Liberty</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EyurAeOI-0E/" /><category term="Java" /><category term="Microservices" /><category term="Open source" /><category term="microprofile metric" /><category term="OAuth" /><category term="OpenLiberty" /><category term="Red Hat OpenShift Application Runtimes" /><category term="Red Hat Runtimes" /><author><name>Tom Jennings</name></author><id>https://developers.redhat.com/blog/?p=674827</id><updated>2020-01-28T08:00:54Z</updated><published>2020-01-28T08:00:54Z</published><content type="html">&lt;p&gt;In &lt;a href="https://openliberty.io/about/" target="_blank" rel="noopener noreferrer"&gt;Open Liberty&lt;/a&gt; 20.0.0.1, you can configure the Social Login feature to use &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;’s OAuth server for authentication. In addition, there is a new MicroProfile Metric to measure CPU time, memory heap and response time. This release also offers faster application startups with Liberty annotation caching, and an updated JavaServer Face.&lt;/p&gt; &lt;h2 id="run"&gt;Run your apps using 20.0.0.1&lt;/h2&gt; &lt;p&gt;If you&amp;#8217;re using &lt;a href="https://openliberty.io/guides/maven-intro.html" target="_blank" rel="noopener noreferrer"&gt;Maven&lt;/a&gt;, here are the coordinates:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.openliberty&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;openliberty-runtime&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;20.0.0.1&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;zip&amp;#60;/type&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;p&gt;If you&amp;#8217;re using &lt;a href="https://openliberty.io/guides/gradle-intro.html" target="_blank" rel="noopener noreferrer"&gt;Gradle&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;dependencies { libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version: '[20.0.0.1,)' }&lt;/pre&gt; &lt;p&gt;Or, if you&amp;#8217;re using &lt;a href="https://openliberty.io/guides/containerize.html" target="_blank" rel="noopener noreferrer"&gt;Docker&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;FROM open-liberty&lt;/pre&gt; &lt;h2&gt;Use Liberty Social Login with Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;The Social Login feature &lt;code&gt;socialLogin-1.0&lt;/code&gt; can now be configured to use OpenShift’s built-in OAuth server and the OAuth Proxy sidecar as authentication providers. The Social Login feature has several pre-configured providers (e.g., Google, GitHub, and Facebook) but you can also configure additional providers (e.g. Instagram). OpenShift&amp;#8217;s OAuth server and OAuth Proxy sidecar can now be configured as additional providers too. The first is a standard OAuth Authorization Code flow, where a web browser accessing an app running in Liberty is redirected to the OpenShift OAuth server to authenticate. The second accepts an inbound token from the OpenShift OAuth Proxy sidecar or obtains one from an OpenShift API call. This second approach requires less cluster-specific configuration.&lt;/p&gt; &lt;p&gt;Most people using this feature will run Liberty in a pod. However, in the Authorization Code flow, Liberty can run outside the OpenShift cluster. In either mode, an optional JWT can be created for propagation to downstream services.&lt;/p&gt; &lt;p&gt;Using OpenShift as a provider differs slightly from other OAuth providers, in that it requires a service account token to obtain information about the OAuth tokens. Once the client ID, secret, and token have been obtained from OpenShift, Liberty can be configured.&lt;/p&gt; &lt;p&gt;To enable your server to use an OpenShift OAuth server, add it to the &lt;code&gt;server.xml&lt;/code&gt;file like this:&lt;/p&gt; &lt;pre&gt; &amp;#60;server description="social"&amp;#62; &amp;#60;!-- Enable features --&amp;#62; &amp;#60;featureManager&amp;#62; &amp;#60;feature&amp;#62;appSecurity-3.0&amp;#60;/feature&amp;#62; &amp;#60;feature&amp;#62;socialLogin-1.0&amp;#60;/feature&amp;#62; &amp;#60;/featureManager&amp;#62; &amp;#60;logging traceSpecification="com.ibm.ws.security.*=all=enabled" maxFiles="8" maxFileSize="200"/&amp;#62; &amp;#60;httpEndpoint id="defaultHttpEndpoint" host="*" httpPort="8941" httpsPort="8946" &amp;#62; &amp;#60;tcpOptions soReuseAddr="true" /&amp;#62; &amp;#60;/httpEndpoint&amp;#62; &amp;#60;!-- specify your clientId, clientSecret and userApiToken as liberty variables or environment variables --&amp;#62; &amp;#60;oauth2Login id="openshiftLogin" scope="user:full" clientId="${myclientId}" clientSecret="${myclientSecret}" authorizationEndpoint="https://oauth-openshift.apps.papains.os.fyre.ibm.com/oauth/authorize" tokenEndpoint="https://oauth-openshift.apps.papains.os.fyre.ibm.com/oauth/token" userNameAttribute="username" groupNameAttribute="groups" userApiToken="${serviceAccountToken}" userApiType="kube" userApi="https://api.papains.os.fyre.ibm.com:6443/apis/authentication.k8s.io/v1/tokenreviews"&amp;#62; &amp;#60;/oauth2Login&amp;#62; &amp;#60;keyStore id="defaultKeyStore" password="keyspass" /&amp;#62; &amp;#60;!-- more application config would go here --&amp;#62; &amp;#60;/server&amp;#62;&lt;/pre&gt; &lt;p&gt;In the sidecar scenario, the configuration changes to accept an inbound token from the sidecar. To set up your server to use an OAuth proxy sidecar:&lt;/p&gt; &lt;pre&gt; &amp;#60;!-- specify your userApiToken as a liberty variable or environment variable --&amp;#62; &amp;#60;!-- note that no clientId or clientSecret are needed --&amp;#62; &amp;#60;oauth2Login id="openshiftLogin" scope="user:full" userNameAttribute="username" groupNameAttribute="groups" userApiToken="${serviceAccountToken}" userApiType="kube" accessTokenHeaderName="X-Forwarded-Access-Token" accessTokenRequired="true" userApi="https://kubernetes.default.svc/apis/authentication.k8s.io/v1/tokenreviews"&amp;#62; &amp;#60;/oauth2Login&amp;#62;&lt;/pre&gt; &lt;p&gt;Using HTTPS communication requires one of two things. You can either give your server a key signed by a well-known certificate authority, which Liberty can trust automatically, or you can add the server&amp;#8217;s public key to the Liberty trust store. OpenShift does not come with CA-signed keys by default, so the Red Hat OpenShift OAuth server&amp;#8217;s public key needs to be added. The most convenient way to do this is to specify an environment variable in &lt;code&gt;server.env&lt;/code&gt;, like so:&lt;/p&gt; &lt;pre&gt; # server.env # OAuth sidecar scenario: causes the Kubernetes default certificate that is pre-installed in pods to be added to Liberty trust store. cert_defaultKeyStore=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt # OAuth server scenario: causes the public keys from /tmp/trustedcert.pem (obtained seperetly) to be added to Liberty trust store. cert_defaultKeyStore=/tmp/trustedcert.pem&lt;/pre&gt; &lt;h2&gt;Monitor the process CPU time (MicroProfile Metrics 2.0)&lt;/h2&gt; &lt;p&gt;A new metric, &lt;code&gt;processCpuTime,&lt;/code&gt; which returns the CPU time used by the process on which the JVM is running. The MicroProfile Metrics feature provides information monitoring an application, such as CPU time used, memory heaps, and servlet response time.&lt;/p&gt; &lt;p&gt;The new &lt;code&gt;processCpuTime&lt;/code&gt; metric provides a more accurate CPU load percentage on cloud platforms via Grafana. Previously, the CPU load percentage was shown with the metric &lt;code&gt;processCpuLoad&lt;/code&gt;. However, the load percentage was calculated using the total number of cores allocated to the deployment. If the deployment has a restricted number of cores, the &lt;code&gt;processCpuLoad&lt;/code&gt; ends up showing a plateau on Grafana when the maximum number of cores is reached. For example, on a deployment with 32 cores allocated but restricted to four cores, the &lt;code&gt;processCpuLoad&lt;/code&gt; graph shows a plateau at 12.5% when all four cores are used.&lt;/p&gt; &lt;p&gt;The new metric, &lt;code&gt;processCpuTime,&lt;/code&gt; can be manipulated on Grafana to create a more accurate representation of the CPU use. The PromQL query &lt;code&gt;rate(processCpuTime)[1m]&lt;/code&gt; shows the average rate of increase in CPU time over one minute. Dividing this result by the total number of CPU cores, we can see a more accurate percentage of the CPU used, taking into account the constraints.&lt;/p&gt; &lt;p&gt;The new &lt;code&gt;processCpuTime&lt;/code&gt; metric is displayed on the &lt;code&gt;/metrics&lt;/code&gt; endpoint with the MicroProfile Metrics 2.0 and 2.2 features. On the &lt;a href="https://github.com/OpenLiberty/open-liberty-operator/tree/master/deploy/dashboards/metrics" target="_blank" rel="noopener noreferrer"&gt;dashboard&lt;/a&gt;, a new panel can be created with the following PromQL query:&lt;/p&gt; &lt;p&gt;&lt;code&gt;(rate(base:cpu_process_cpu_time[1m])/1e9) / base:cpu_available_processors{app=~[[app]]}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/OpenLiberty/open-liberty-operator/tree/master/deploy/dashboards/metrics" target="_blank" rel="noopener noreferrer"&gt;View full dashboard.&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Start your applications faster with Liberty annotation caching&lt;/h2&gt; &lt;p&gt;Application startup time is now faster due to adding annotation caching to the core class and annotation scanning function. Depending on application characteristics, startup times are reduced by 10% to more than 50%. Applications with many jar files, or that use CDI or JAX-RS functions, see the best improvements, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_678627" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-678627" class="wp-image-678627" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/20001annocache.png" alt="Graph showing the startup time boosts broken out by context" width="639" height="393" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/20001annocache.png 776w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/20001annocache-300x184.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/20001annocache-768x472.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;p id="caption-attachment-678627" class="wp-caption-text"&gt;Figure 1: Annotation caching boosts startup times.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Good news! Annotation caching is enabled by default.&lt;/p&gt; &lt;p&gt;Annotation cache data is stored in the server&amp;#8217;s work area. The cache of application class data is cleared when performing a clean server start (starting the server with the &lt;code&gt;--clean&lt;/code&gt; option). In normal operations, the clearing of cache data is not necessary, since the cache automatically regenerates cache data for changed application classes.&lt;/p&gt; &lt;p&gt;In container environments, for annotation caching to be effective, the server image must be &lt;em&gt;warmed&lt;/em&gt; when the container image is created. Warming the server can be done by starting and stopping the server during the container build. Warming the image moves the annotation scan into the container build, meaning that you get optimal startup for container deployment. Using the &lt;code&gt;configure.sh&lt;/code&gt; file in the base &lt;code&gt;open-liberty&lt;/code&gt; docker images causes the server to be started and stopped during the container build.&lt;/p&gt; &lt;h2&gt;Bug fixes in JavaServer Faces 2.3&lt;/h2&gt; &lt;p&gt;JavaServer Faces 2.3 contains a new feature to load bug fixes that are in Apache MyFaces 2.3.6. The &lt;code&gt;jsf-2.3&lt;/code&gt; feature pulls the Apache MyFaces implementation and integrates it into the Liberty runtime.&lt;/p&gt; &lt;p&gt;The Apache MyFaces 2.3.6 release contains bug fixes. View &lt;a href="https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=10600&amp;#38;version=12346352" target="_blank" rel="noopener noreferrer"&gt;the release notes for more information.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;To use JSF 2.3, enable the &lt;code&gt;jsf-2.3&lt;/code&gt; feature to leverage the latest Apache MyFaces 2.3.x release. For more information about the JavaServer feature, view the &lt;a href="https://myfaces.apache.org/" target="_blank" rel="noopener noreferrer"&gt;Apache website&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Try Open Liberty 20.0.0.1 in Red Hat Runtimes now&lt;/h2&gt; &lt;p&gt;Open Liberty is part of the Red Hat Runtimes offering. If you&amp;#8217;re a &lt;a href="https://access.redhat.com/products/red-hat-runtimes" target="_blank" rel="noopener noreferrer"&gt;Red Hat Runtimes subscriber&lt;/a&gt;, you can try Open Liberty now.&lt;/p&gt; &lt;p&gt;To learn more about deploying Open Liberty applications to OpenShift, take a look at our &lt;a href="https://openliberty.io/guides/cloud-openshift.html" target="_blank" rel="noopener noreferrer"&gt;Open Liberty guide: Deploying microservices to OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#038;title=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" data-a2a-url="https://developers.redhat.com/blog/2020/01/28/use-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty/" data-a2a-title="Use Red Hat OpenShift’s built-in OAuth server as an authentication provider in Open Liberty"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/28/use-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty/"&gt;Use Red Hat OpenShift&amp;#8217;s built-in OAuth server as an authentication provider in Open Liberty&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EyurAeOI-0E" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In Open Liberty 20.0.0.1, you can configure the Social Login feature to use Red Hat OpenShift’s OAuth server for authentication. In addition, there is a new MicroProfile Metric to measure CPU time, memory heap and response time. This release also offers faster application startups with Liberty annotation caching, and an updated JavaServer Face. Run your [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/28/use-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty/"&gt;Use Red Hat OpenShift&amp;#8217;s built-in OAuth server as an authentication provider in Open Liberty&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">674827</post-id><dc:creator>Tom Jennings</dc:creator><dc:date>2020-01-28T08:00:54Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/28/use-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty/</feedburner:origLink></entry><entry><title>Introduction to Eclipse JKube: Java tooling for Kubernetes and Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/p6lKUkA-n-Q/" /><category term="Developer Tools" /><category term="Java" /><category term="Kubernetes" /><category term="Fabric8 Maven plugin" /><category term="Jkube" /><category term="openshift" /><author><name>Rohan Kumar</name></author><id>https://developers.redhat.com/blog/?p=669677</id><updated>2020-01-28T08:00:33Z</updated><published>2020-01-28T08:00:33Z</published><content type="html">&lt;p&gt;We as Java developers are often busy working on our applications by optimizing application memory, speed, etc. In recent years, encapsulating our applications into lightweight, independent units called containers has become quite a trend, and almost every enterprise is trying to shift its infrastructure onto container technologies like Docker and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Kubernetes is an open source system for automating deployment, scaling, and management of containerized applications, but it has a steep learning curve, and an application developer with no background in &lt;a href="https://developers.redhat.com/topics/devops/"&gt;DevOps&lt;/a&gt; can find this system a bit overwhelming. In this article, I will talk about tools that can help when deploying your Maven applications to Kubernetes/&lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;span id="more-669677"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Background: Eclipse JKube&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;This project was not built from scratch. It’s just a refactored and rebranded version of the &lt;a href="https://github.com/fabric8io/fabric8-maven-plugin" target="_blank" rel="noopener noreferrer"&gt;Fabric8 Maven plugin&lt;/a&gt;, which was a Maven plugin used in the &lt;a href="http://fabric8.io" target="_blank" rel="noopener noreferrer"&gt;Fabric8&lt;/a&gt; ecosystem. Although the Fabric8 project was liked and appreciated by many people in the open source community, due to unfortunate reasons it could not become successful, and the idea of Fabric8 as an integrated development platform on top of Kubernetes died. Although the main project is archived, there are still active repositories used by the community, such as the &lt;a href="https://github.com/fabric8io/docker-maven-plugin" target="_blank" rel="noopener noreferrer"&gt;Fabric8 Docker Maven plugin&lt;/a&gt;, the &lt;a href="https://github.com/fabric8io/kubernetes-client" target="_blank" rel="noopener noreferrer"&gt;Fabric8 Kubernetes client&lt;/a&gt;, and of course the Fabric8 Maven plugin.&lt;/p&gt; &lt;p&gt;As maintainers of the Fabric8 Maven plugin, we started decoupling the Fabric8 ecosystem related pieces from the plugin to make a general-purpose Kubernetes/OpenShift plugin. We also felt there was a need for rebranding because most people were confused about whether this plugin had something to do with Fabric8. Hence, we decided to rebrand it, and fortunately, someone from the Eclipse foundation approached us to take in our project. Now, the project is being renamed to Eclipse JKube and can be &lt;a href="https://github.com/eclipse/jkube" target="_blank" rel="noopener noreferrer"&gt;found in the Eclipse Foundation repos on GitHub&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Eclipse JKube can be seen as a reincarnation of the Fabric8 Maven plugin. It contains the good parts of this plugin and offers a clean and smooth workflow with the tooling it provides. We refactored this plugin into three components:&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;The JKube Kit&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;The Kubernetes Maven plugin&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;The OpenShift Maven plugin&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The JKube Kit contains the core logic for building Docker images, generating Kubernetes/OpenShift manifests, and applying them onto Kubernetes/OpenShift clusters. Plugins consume this library for their operations. In the future, we also plan to add support for Gradle plugins.&lt;/p&gt; &lt;h2&gt;Example&lt;/h2&gt; &lt;p&gt;Now, let’s have a look at Eclipse JKube in action. For the demo, I will deploy a simple Spring Boot project onto Kubernetes using the &lt;a href="https://github.com/rohanKanojia/eclipse-jkube-demo-project" target="_blank" rel="noopener noreferrer"&gt;Eclipse Kubernetes Maven plugin&lt;/a&gt;. Let&amp;#8217;s walk through this process:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Add the Kubernetes Maven plugin as a dependency in your &lt;code&gt;pom.xml&lt;/code&gt; file, as shown in Figure 1:&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_669707" style="width: 436px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669707" class="wp-image-669707" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-22-59.png" alt="The Kubernetes Maven plugin added as a dependency in pom.xml." width="426" height="89" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-22-59.png 772w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-22-59-300x63.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-22-59-768x161.png 768w" sizes="(max-width: 426px) 100vw, 426px" /&gt;&lt;p id="caption-attachment-669707" class="wp-caption-text"&gt;Figure 1: The Kubernetes Maven plugin added as a dependency in &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt; &lt;ol start="2"&gt; &lt;li&gt;Build your Docker images. The Eclipse JKube Kubernetes Maven plugin offers a zero-config mode, in which it builds your Docker image with opinionated defaults. However, you can customize it by providing an image configuration in the plugin configuration. In order to build a Docker image, you just need to run the following (the results are shown in Figure 2):&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:build&lt;/pre&gt; &lt;div id="attachment_669727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669727" class="wp-image-669727 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45-1024x723.png" alt="The results of the Docker image build command." width="640" height="452" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45-1024x723.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45-300x212.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45-768x542.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45.png 1282w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-669727" class="wp-caption-text"&gt;Figure 2: Building the Docker image.&lt;/p&gt;&lt;/div&gt; &lt;ol start="3"&gt; &lt;li&gt;Generate your Kubernetes resource manifests. Eclipse JKube plugins have a powerful and configurable resource generation mechanism in which they can generate Kubernetes resources in zero-config mode. This feature can also be configured using XML configuration or by placing customized resource fragments in the &lt;code&gt;src/main/jkube&lt;/code&gt; directory. The results are merged with the finally generated resource fragments. In order to generate resources, run the following (the results are shown in Figure 3):&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:resource&lt;/pre&gt; &lt;div id="attachment_669717" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669717" class="wp-image-669717 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13-1024x363.png" alt="The results of the resource manifest creation command." width="640" height="227" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13-1024x363.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13-300x106.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13-768x273.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13.png 1513w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-669717" class="wp-caption-text"&gt;Figure 3: Creating the Kubernetes resource manifests.&lt;/p&gt;&lt;/div&gt; &lt;ol start="4"&gt; &lt;li&gt;Apply generated Kubernetes resources onto the Kubernetes cluster. In order to apply resources onto this cluster, you just need to run one of the following (the results are shown in Figure 4):&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:apply&lt;/pre&gt; &lt;p style="text-align: left; padding-left: 40px;"&gt;or:&lt;/p&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:deploy&lt;/pre&gt; &lt;div id="attachment_669737" style="width: 310px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669737" class="wp-image-669737 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-50-30-300x244.png" alt="The results of the command to apply the generated Kubernetes resources onto the Kubernetes cluster." width="300" height="244" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-50-30-300x244.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-50-30-768x625.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-50-30.png 987w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;p id="caption-attachment-669737" class="wp-caption-text"&gt;Figure 4: Applying the generated Kubernetes resources onto the Kubernetes cluster.&lt;/p&gt;&lt;/div&gt; &lt;ol start="5"&gt; &lt;li&gt;Undeploy your Maven application from Kubernetes. We have a cleanup goal, too, which just deletes all resources created during the deploy phase. To use this feature, run the following (the results are shown in Figure 5):&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:undeploy&lt;/pre&gt; &lt;div id="attachment_669747" style="width: 310px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669747" class="wp-image-669747 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-53-11-300x182.png" alt="The results of undeploying your Maven application from Kubernetes." width="300" height="182" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-53-11-300x182.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-53-11-768x467.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-53-11.png 943w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;p id="caption-attachment-669747" class="wp-caption-text"&gt;Figure 5: Undeploying your Maven application from Kubernetes.&lt;/p&gt;&lt;/div&gt; &lt;ol start="6"&gt; &lt;li&gt;Debug your Java application inside Kubernetes. Apart from these goals, we also have a goal for remote debugging. Suppose that you see a bug inside your application that&amp;#8217;s running inside Kubernetes and you want to debug its behavior. You can simply run our debug goal, which does port forwarding for debugging:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:debug&lt;/pre&gt; &lt;ol start="7"&gt; &lt;li&gt;Configure your IDE in order to connect to this open port for debugging, as shown in Figure 6:&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_669757" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669757" class="wp-image-669757 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-59-41-1024x576.png" alt="A configuration window open in the IDE." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-59-41-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-59-41-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-59-41-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-669757" class="wp-caption-text"&gt;Figure 6: Configuring your IDE to debug your Java application inside Kubernetes via Maven.&lt;/p&gt;&lt;/div&gt; &lt;ol start="8"&gt; &lt;li&gt;Set a breakpoint in the application code and hit the application endpoint. We can see the breakpoint being hit in IDE as shown in Figure 7:&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_669767" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669767" class="wp-image-669767 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-19-00-59-1024x576.png" alt="The IDE hitting the application's breakpoint." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-19-00-59-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-19-00-59-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-19-00-59-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-669767" class="wp-caption-text"&gt;Figure 7: The application&amp;#8217;s breakpoint in your IDE.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;With this result, I wrap up this article. We do have more in our pipeline, so stay tuned for new updates. If you want to get involved, please reach out to us via our mailing list at &lt;a href="mailto:jkube-dev@eclipse.org" target="_blank" rel="noopener noreferrer"&gt;jkube-dev@eclipse.org&lt;/a&gt;, or our Gitter channel at &lt;a href="https://gitter.im/eclipse/jkube#" target="_blank" rel="noopener noreferrer"&gt;https://gitter.im/eclipse/jkube#&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#038;title=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/01/28/introduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift/" data-a2a-title="Introduction to Eclipse JKube: Java tooling for Kubernetes and Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/28/introduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift/"&gt;Introduction to Eclipse JKube: Java tooling for Kubernetes and Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/p6lKUkA-n-Q" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;We as Java developers are often busy working on our applications by optimizing application memory, speed, etc. In recent years, encapsulating our applications into lightweight, independent units called containers has become quite a trend, and almost every enterprise is trying to shift its infrastructure onto container technologies like Docker and Kubernetes. Kubernetes is an open [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/28/introduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift/"&gt;Introduction to Eclipse JKube: Java tooling for Kubernetes and Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">669677</post-id><dc:creator>Rohan Kumar</dc:creator><dc:date>2020-01-28T08:00:33Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/28/introduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift/</feedburner:origLink></entry><entry><title>Open Virtual Network unidling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/qNK4ZLZE8WM/" /><category term="Containers" /><category term="Event-Driven" /><category term="Kubernetes" /><category term="controller_event" /><category term="openshift" /><category term="OVN unidling" /><category term="OVS" /><author><name>Lorenzo Bianconi</name></author><id>https://developers.redhat.com/blog/?p=667367</id><updated>2020-01-27T08:00:43Z</updated><published>2020-01-27T08:00:43Z</published><content type="html">&lt;p&gt;Open Virtual Network (OVN) is a project born as a sub-component of &lt;a href="http://www.openvswitch.org/" target="_blank" rel="noopener noreferrer"&gt;Open vSwitch (OVS)&lt;/a&gt;, which is a performant, programmable, multi-platform virtual switch. OVN allows OVS users to natively create overlay networks by introducing virtual network abstractions such as virtual switches and routers. Moreover, OVN provides methods for setting up Access Control Lists (ACLs) and network services such as DHCP. Many Red Hat products, like &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenStack Platform&lt;/a&gt;, &lt;a href="https://www.redhat.com/en/technologies/virtualization/enterprise-virtualization" target="_blank" rel="noopener noreferrer"&gt;Red Hat Virtualization&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;, rely on OVN to configure network functionalities.&lt;/p&gt; &lt;p&gt;In this article, I will cover the OVN &lt;em&gt;unidling&lt;/em&gt; issue and how the proposed solution can be used to forward events to a CMS (e.g., OpenStack or OpenShift).&lt;/p&gt; &lt;p&gt;&lt;span id="more-667367"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Unidling problem: OpenShift use case&lt;/h2&gt; &lt;p&gt;A simplified OVN-Kubernetes deployment is shown in Figure 1. The overlay network is connected to an external one through a localnet port (&lt;code&gt;ln-public&lt;/code&gt;, in this case):&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;div id="attachment_667397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-667397" class="wp-image-667397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling-1024x567.png" alt="OVN-Kubernetes deployment network diagram" width="640" height="354" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling-1024x567.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling-768x425.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling.png 1052w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-667397" class="wp-caption-text"&gt;Figure 1: A simplified OVN-Kubernetes deployment.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Below is the related OVN NB database network configuration:&lt;/p&gt; &lt;pre&gt;switch e2564770-8658-4086-8f41-9995d5ff0da2 (sw1) port sw1-p0 addresses: ["00:00:00:00:00:33 192.168.2.11"] port lrp1-attachment type: router addresses: ["00:00:00:ff:00:02"] router-port: lrp1 switch 512be578-1c95-4ac0-b196-8f5ef38a1517 (sw0) port sw0-p0 addresses: ["00:00:00:00:00:11 192.168.1.11"] port sw0-p1 addresses: ["00:00:00:00:00:12 192.168.1.12"] port lrp0-attachment type: router addresses: ["00:00:00:ff:00:01"] router-port: lrp0 switch ee2b44de-7d2b-4ffa-8c4c-2e1ac7997639 (public) port ln-public type: localnet addresses: ["unknown"] port lrp2-attachment type: router addresses: ["00:00:00:00:ff:03"] router-port: lrp2 router 681dfe85-6f90-44e3-9dfe-f1c81f4cfa32 (lr0) port lrp2 mac: "00:00:00:00:ff:03" networks: ["192.168.3.254/24"] port lrp1 mac: "00:00:00:00:ff:02" networks: ["192.168.2.254/24"] port lrp0 mac: "00:00:00:00:ff:01" networks: ["192.168.1.254/24"] &lt;/pre&gt; &lt;p&gt;OVN Load Balancer (LB) services are used to demultiplex traffic between running pods. LB configuration is stored in the OVN Northd (OVN-NB) database&amp;#8217;s &lt;code&gt;Load_Balancer&lt;/code&gt; table:&lt;/p&gt; &lt;pre&gt;_uuid : 7381bdc2-cb26-40e9-93db-d7f733c8afbd external_ids : {} health_check : [] ip_port_mappings : {} name : lb0 protocol : tcp vips : {"192.168.1.100:80"="192.168.1.11:80,192.168.1.12:80"} &lt;/pre&gt; &lt;p&gt;However, after an inactivity timeout, a given pod can be powered down by OpenShift and the related backends are removed from the load balancer configuration, resulting in a Virtual IP (VIP) with no backends:&lt;/p&gt; &lt;pre&gt;_uuid : f93bca28-87b4-4d98-9193-b49644f15ee6 external_ids : {} health_check : [] ip_port_mappings : {} name : lb0 protocol : tcp vips : {"192.168.1.100:80"=""} &lt;/pre&gt; &lt;p&gt;As a consequence, the system results in a deadlock state, because a new packet for the suspended service will not be forwarded by OVN to the related pod without a proper network configuration.&lt;/p&gt; &lt;h2&gt;Proposed solution: &lt;code&gt;Controller_Event&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;In order to overcome this limitation, a &lt;a href="https://github.com/openvswitch/ovs/commit/f732a1ab9c574c1c17858a84cf7d25f294dfb151" target="_blank" rel="noopener noreferrer"&gt;solution&lt;/a&gt; has been proposed by which &lt;a href="https://github.com/ovn-org/ovn/blob/master/ovn-sb.ovsschema#L355" target="_blank" rel="noopener noreferrer"&gt;a new table&lt;/a&gt;, &lt;code&gt;Controller_Event&lt;/code&gt;, has been added to the OVN Southbound database. Moreover, new &lt;code&gt;trigger_event&lt;/code&gt; logical flows have been introduced into OVN pipelines in order to generate a &lt;em&gt;controller event&lt;/em&gt; whenever an IP packet for an LB rule with no backends is received by OVN:&lt;/p&gt; &lt;pre&gt; table=4 (ls_in_pre_lb ), priority=130 , match=(ip4.dst == 192.168.1.100 &amp;#38;&amp;#38; tcp &amp;#38;&amp;#38; tcp.dst == 80), action=(trigger_event(event = "empty_lb_backends", meter = "event-elb", vip = "192.168.1.100:80", protocol = "tcp", load_balancer = "38350663-862f-4aae-94e7-c0149e11d293");) &lt;/pre&gt; &lt;p&gt;The OVN &lt;code&gt;trigger_event&lt;/code&gt; action will convert an unsolicited event into a new row in the &lt;code&gt;Controller_Event&lt;/code&gt; table, allowing the CMS to be notified about the request for the &amp;#8220;suspended&amp;#8221; service:&lt;/p&gt; &lt;pre&gt;_uuid : c4d5493a-a630-47f8-adbb-e20a402e69de chassis : 24852cd2-bea6-48fd-b77a-95d2e47c836c event_info : {load_balancer="9d6542eb-6533-4d3c-b0a5-4e54826968b6", protocol=tcp, vip="192.168.1.100:80"} event_type : empty_lb_backends seq_num : 1 &lt;/pre&gt; &lt;p&gt;Recently, Controller Event has been also &lt;a href="https://github.com/ovn-org/ovn-kubernetes/commit/7a789d00f89e90f29bdba3abfab8a797c242c8dc" target="_blank" rel="noopener noreferrer"&gt;integrated into &lt;code&gt;ovn-kubernetes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Future development&lt;/h2&gt; &lt;p&gt;Since the proposed framework is not tied just to the unidling scenario, a possible future enhancement to the described methodology could be to extend the &lt;code&gt;trigger_event&lt;/code&gt; action in order to report more unsolicited events to the attention of the CMS in order to allow it to take necessary actions.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;p&gt;Check out these other articles related to OVN and OVS:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/08/how-to-create-an-open-virtual-network-distributed-gateway-router/"&gt;How to create an Open Virtual Network distributed gateway router&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/09/03/ovn-dynamic-ip-address-management/"&gt;Dynamic IP address management in Open Virtual Network (OVN): Part One&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/09/27/dynamic-ip-address-management-in-open-virtual-network-ovn-part-two/"&gt;Dynamic IP address management in Open Virtual Network (OVN): Part Two&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/23/non-root-open-vswitch-rhel/"&gt;Non-root Open vSwitch in RHEL&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/16/ovs-dpdk-hugepage-memory/"&gt;Open vSwitch-DPDK: How Much Hugepage Memory?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/06/27/open-vswitch-qinq-performance/"&gt;Open vSwitch: QinQ Performance&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/07/ip-packet-buffering-in-ovn/"&gt;IP packet buffering in OVN&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#038;title=Open%20Virtual%20Network%20unidling" data-a2a-url="https://developers.redhat.com/blog/2020/01/27/open-virtual-network-unidling/" data-a2a-title="Open Virtual Network unidling"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/27/open-virtual-network-unidling/"&gt;Open Virtual Network unidling&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/qNK4ZLZE8WM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Open Virtual Network (OVN) is a project born as a sub-component of Open vSwitch (OVS), which is a performant, programmable, multi-platform virtual switch. OVN allows OVS users to natively create overlay networks by introducing virtual network abstractions such as virtual switches and routers. Moreover, OVN provides methods for setting up Access Control Lists (ACLs) and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/27/open-virtual-network-unidling/"&gt;Open Virtual Network unidling&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">667367</post-id><dc:creator>Lorenzo Bianconi</dc:creator><dc:date>2020-01-27T08:00:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/27/open-virtual-network-unidling/</feedburner:origLink></entry><entry><title>How to Install Red Hat Decision Manager 7.6 in Minutes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lsSAqOWw6gY/how-to-install-red-hat-decision-manager-76-in-minutes.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-how_to_install_red_hat_decision_manager_7_6_in_minutes</id><updated>2020-01-27T06:00:02Z</updated><published>2020-01-27T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://1.bp.blogspot.com/-cx9_jd_GvKs/XiAi_Q0TWTI/AAAAAAAAw2o/TnMQmCftBw0426Hhw6dp1WumTaIH1BxygCNcBGAsYHQ/s1600/rhdm-login.png" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="red hat decision manager" border="0" data-original-height="922" data-original-width="1600" height="184" src="https://1.bp.blogspot.com/-cx9_jd_GvKs/XiAi_Q0TWTI/AAAAAAAAw2o/TnMQmCftBw0426Hhw6dp1WumTaIH1BxygCNcBGAsYHQ/s320/rhdm-login.png" title="" width="320" /&gt;&lt;/a&gt;While you've seen the many &lt;a href="http://www.schabell.org/search/label/OpenShift" target="_blank"&gt;developer tooling articles&lt;/a&gt; where I've helped you to &lt;a href="https://gitlab.com/redhatdemocentral" target="_blank"&gt;get started on the OpenShift Container Platform&lt;/a&gt;, there is still a basic need to run our tooling locally on our own machine.&lt;br /&gt;&lt;br /&gt;With that in mind, here's an update that installs the latest version of open source decision management tooling for your development projects in just minutes on your very own machine.&lt;br /&gt;&lt;br /&gt;Not only that, it's done in just three easy steps and done in a few minutes!&lt;br /&gt;&lt;br /&gt;See if I'm telling the truth, let's install it now.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;Just three easy steps to a fully installed and configured Red Hat Decision Manager.&lt;br /&gt;&lt;h2 data-sourcepos="6:1-8:122" dir="auto"&gt;&lt;a href="https://1.bp.blogspot.com/-fhYo3RRwnLc/Xir9iQUe8EI/AAAAAAAAw4I/Yk3JWfgbEtkOR_WmBUc4KcHPFno5h_QegCNcBGAsYHQ/s1600/rhdm-decision-central.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="red hat decsion management" border="0" data-original-height="939" data-original-width="1599" height="187" src="https://1.bp.blogspot.com/-fhYo3RRwnLc/Xir9iQUe8EI/AAAAAAAAw4I/Yk3JWfgbEtkOR_WmBUc4KcHPFno5h_QegCNcBGAsYHQ/s320/rhdm-decision-central.png" title="" width="320" /&gt;&lt;/a&gt;&amp;nbsp; Install on your machine&lt;/h2&gt;There are a few component you'll need to download for free from the provided developers site, then obtain the project linked below, add the downloads, and run the installation script.&lt;br /&gt;&lt;div style="text-align: right;"&gt;&lt;br /&gt;&lt;/div&gt;Watch the installation unfold before your eyes, with configuration, settings, and user creation all detailed in the script output so you can learn from the installation.&lt;br /&gt;&amp;nbsp; &lt;br /&gt;&lt;div&gt;Give it a try with these three steps:&lt;br /&gt;&lt;ol&gt;&lt;li data-sourcepos="8:1-9:0"&gt;&lt;div data-sourcepos="8:4-8:120"&gt;&lt;a href="https://gitlab.com/bpmworkshop/rhdm-install-demo/-/archive/master/rhdm-install-demo-master.zip" target="_blank"&gt;Download and unzip.&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="10:1-11:0"&gt;&lt;div data-sourcepos="10:4-10:81"&gt;Add products to installs directory, see installs/README for details and links.&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="14:1-15:0"&gt;&lt;div data-sourcepos="12:4-12:90"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges&lt;/div&gt;&lt;div data-sourcepos="12:4-12:90"&gt;&lt;br /&gt;&lt;/div&gt;&amp;nbsp;Log in to http://localhost:8080/decision-central (u:erics / p:redhatdm1!)&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;That's it, not it's time to enjoy your installed and configured Red Hat Decision Manager.&lt;br /&gt;&lt;br /&gt;Not sure how to get started with process automation? Try one of these &lt;a href="https://bpmworkshop.gitlab.io/index-redhat.html#/2" rel=" noreferrer noopener" target="_blank"&gt;online workshops&lt;/a&gt; to build a first project from scratch.&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=69v9wRZvpHU:HHu6DYfVZyg:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=69v9wRZvpHU:HHu6DYfVZyg:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=69v9wRZvpHU:HHu6DYfVZyg:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=69v9wRZvpHU:HHu6DYfVZyg:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=69v9wRZvpHU:HHu6DYfVZyg:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=69v9wRZvpHU:HHu6DYfVZyg:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=69v9wRZvpHU:HHu6DYfVZyg:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=69v9wRZvpHU:HHu6DYfVZyg:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=69v9wRZvpHU:HHu6DYfVZyg:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=69v9wRZvpHU:HHu6DYfVZyg:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=69v9wRZvpHU:HHu6DYfVZyg:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/69v9wRZvpHU" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lsSAqOWw6gY" height="1" width="1" alt=""/&gt;</content><summary>While you've seen the many developer tooling articles where I've helped you to get started on the OpenShift Container Platform, there is still a basic need to run our tooling locally on our own machine. With that in mind, here's an update that installs the latest version of open source decision management tooling for your development projects in just minutes on your very own machine. Not only that...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-01-27T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/69v9wRZvpHU/how-to-install-red-hat-decision-manager-76-in-minutes.html</feedburner:origLink></entry><entry><title>Infinispan Operator 1.1.0 is out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/pLxzFo03hj8/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Galder Zamarreño</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_operator_1_1_0_is_out</id><updated>2020-01-28T10:20:46Z</updated><published>2020-01-24T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We’re pleased to announce &lt;a href="https://operatorhub.io/operator/infinispan"&gt;version 1.1.0 of the Infinispan Operator&lt;/a&gt; for Kubernetes and OpenShift.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This release includes a bunch of very exciting features! Let’s dig into them:&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_full_lifecycle"&gt;&lt;a class="anchor" href="#_full_lifecycle"&gt;&lt;/a&gt;Full Lifecycle&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan Operator 1.1.0 is rated at the &lt;code&gt;Full Lifecycle&lt;/code&gt; capacity level, which means the Operator now provides advanced cluster management capabilities and functionality to handle demanding workloads.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One of the key new features in this release is graceful shutdown, which lets you bring clusters down safely to avoid data loss.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;During cluster shutdown, caches can passivate in-memory entries to persistent storage along with the internal Infinispan state that maps which nodes own which entries. When you bring Infinispan clusters back, all your data is restored to memory.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Check out the &lt;a href="https://infinispan.org/infinispan-operator/master/operator.html#shutting_down-start"&gt;Graceful Shutdown&lt;/a&gt; docs for more information.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Graceful shutdown also enables the Infinispan Operator to perform reliable upgrades.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When a new version of the Infinispan Operator starts, it checks for running Infinispan clusters that were created by an older Operator version.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If the Operator detects a cluster that requires upgrade, it invokes a graceful shutdown on the cluster and then brings it back with the new Infinispan version.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can perform upgrade manually or automatically with the &lt;a href="https://docs.openshift.com/container-platform/4.3/operators/understanding-olm/olm-understanding-olm.html"&gt;Operator Lifecycle Manager&lt;/a&gt; on OpenShift.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note that Operators installed via the OperatorHub on OpenShift Container Platform are managed by the Operator Lifecyle Manager.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_cache_vs_datagrid"&gt;&lt;a class="anchor" href="#_cache_vs_datagrid"&gt;&lt;/a&gt;Cache vs DataGrid&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This version of the Infinispan Operator delivers Cache and DataGrid services.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;By default the Operator starts Infinispan clusters as Cache services, which provides a quick way to set up in-memory caching that stores data off-heap and keeps single copies of data in the cluster.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;DataGrid services, on the other hand, are suited to more advanced use cases where you control and define the configuration that you need.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_cross_site_replication"&gt;&lt;a class="anchor" href="#_cross_site_replication"&gt;&lt;/a&gt;Cross-Site Replication&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Infinispan Operator simplifies cross-site replication set up with DataGrid services so you can back data up between separate Kubernetes or OpenShift clusters.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All you need to do is specify which type of external Kubernetes service to expose, the list of all backup locations, access secrets, and the local site name.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Find out more at: &lt;a href="https://infinispan.org/infinispan-operator/master/operator.html#configuring_backup_sites"&gt;Cross-Site Replication&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_automatic_tls_configuration"&gt;&lt;a class="anchor" href="#_automatic_tls_configuration"&gt;&lt;/a&gt;Automatic TLS configuration&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you’re running on Openshift and have a service that serves certificates, the Operator automatically asks for certificates sets up TLS for your endpoint connections. Encrypted by default with zero effort!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us"&gt;&lt;/a&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Try the &lt;a href="https://github.com/infinispan/infinispan-simple-tutorials/tree/master/operator"&gt;simple tutorial&lt;/a&gt; for the Operator, which has been updated for this version. The tutorial shows how to install the Operator manually, but it can also be installed via the Operator Hub on OpenShift.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can &lt;a href="https://github.com/infinispan/infinispan-operator/issues"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Finally, a detailed list of issues and features for this version can be found &lt;a href="https://github.com/infinispan/infinispan-operator/issues?q=milestone%3A1.1.0+is%3Aclosed"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/pLxzFo03hj8" height="1" width="1" alt=""/&gt;</content><summary>We’re pleased to announce version 1.1.0 of the Infinispan Operator for Kubernetes and OpenShift. This release includes a bunch of very exciting features! Let’s dig into them: Full Lifecycle Infinispan Operator 1.1.0 is rated at the Full Lifecycle capacity level, which means the Operator now provides advanced cluster management capabilities and functionality to handle demanding workloads. One of th...</summary><dc:creator>Galder Zamarreño</dc:creator><dc:date>2020-01-24T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/01/24/2020-01-24-infinispan-operator-1.1.0/</feedburner:origLink></entry><entry><title>Apache Camel K development inside Eclipse Che: Iteration 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sI5gl7fkbpk/" /><category term="Developer Tools" /><category term="Java" /><category term="VS Code" /><category term="Camel K" /><category term="Eclipse Che 7" /><category term="minikube" /><category term="Red Hat Integration" /><author><name>Aurélien Pupier</name></author><id>https://developers.redhat.com/blog/?p=669797</id><updated>2020-01-24T08:00:31Z</updated><published>2020-01-24T08:00:31Z</published><content type="html">&lt;p&gt;The Eclipse Che &lt;a href="https://github.com/eclipse/che/releases/tag/7.6.0" target="_blank" rel="noopener noreferrer"&gt;7.6.0 release&lt;/a&gt; provides a new stack for &lt;a href="https://camel.apache.org/camel-k/latest/index.html" target="_blank" rel="noopener noreferrer"&gt;Apache Camel K&lt;/a&gt; integration development. This release is the first iteration to give a preview of what is possible. If you like what you see, shout it out, and more will surely come.&lt;/p&gt; &lt;p&gt;This article details how to test this release on a local instance deployed on &lt;a href="https://minikube.sigs.k8s.io/" target="_blank" rel="noopener noreferrer"&gt;minikube&lt;/a&gt;. The difference with a hosted instance is that we avoid the prerequisites involving Camel K installation in the cluster and specific rights for the user.&lt;/p&gt; &lt;p&gt;&lt;span id="more-669797"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Set up the Che instance&lt;/h2&gt; &lt;p&gt;A container host needs to be available. For instance, you can use minikube. Che requires a large amount of memory, so you need to increase what is allocated by default. For instance:&lt;/p&gt; &lt;pre&gt;$ minikube start --memory=4096&lt;/pre&gt; &lt;p&gt;This command provides output like this:&lt;/p&gt; &lt;pre&gt;&amp;#x1f604; minikube v1.3.1 on Fedora 31 &amp;#x1f525; Creating virtualbox VM (CPUs=4, Memory=4096MB, Disk=50000MB) ... &amp;#x1f433; Preparing Kubernetes v1.15.2 on Docker 18.09.8 ... &amp;#x1f69c; Pulling images ... &amp;#x1f680; Launching Kubernetes ... &amp;#x231b; Waiting for: apiserver proxy etcd scheduler controller dns &amp;#x1f3c4; Done! kubectl is now configured to use "minikube" &lt;/pre&gt; &lt;p&gt;See the &lt;a href="https://www.eclipse.org/che/docs/che-7/running-che-locally/#using-minikube-to-set-up-kubernetes_running-che-locally" target="_blank" rel="noopener noreferrer"&gt;official Che 7 documentation&lt;/a&gt; for more details. Then, download &lt;code&gt;chectl&lt;/code&gt; from &lt;a href="https://github.com/che-incubator/chectl/releases" target="_blank" rel="noopener noreferrer"&gt;GitHub releases&lt;/a&gt;. You will be able to install Che on your minikube instance with the following command:&lt;/p&gt; &lt;pre&gt;$ chectl server:start --platform minikube&lt;/pre&gt; &lt;p&gt;This command provides output like this:&lt;/p&gt; &lt;pre&gt; &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify Kubernetes API...OK &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; &amp;#x1f440; Looking for an already existing Che instance &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify if Che is deployed into namespace "che"...it is not &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; &amp;#x2708; Minikube preflight checklist &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify if kubectl is installed &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify if minikube is installed &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify if minikube is running &lt;span style="color: #c4a000;"&gt;↓&lt;/span&gt; Start minikube [skipped] &lt;span style="color: #555753;"&gt; → Minikube is already running.&lt;/span&gt; &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify if minikube ingress addon is enabled &lt;span style="color: #c4a000;"&gt;↓&lt;/span&gt; Enable minikube ingress addon [skipped] &lt;span style="color: #555753;"&gt; → Ingress addon is already enabled.&lt;/span&gt; &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Retrieving minikube IP and domain for ingress URLs...192.168.99.123.nip.io. &lt;span style="color: #c4a000;"&gt;❯&lt;/span&gt; &amp;#x1f3c3;&amp;#x200d; Running Helm to install Che &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify if helm is installed &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Check Helm Version: Found v3.0.0+ge29ce2a &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Create Namespace (che)...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; &amp;#x1f3c3;&amp;#x200d; Running Helm to install Che &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify if helm is installed &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Check Helm Version: Found v3.0.0+ge29ce2a &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Create Namespace (che)...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Check Cluster Role Binding...does not exists. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Preparing Che Helm Chart...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Updating Helm Chart dependencies...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Deploying Che Helm Chart...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; &amp;#x2705; Post installation checklist &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Devfile registry pod bootstrap &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; scheduling...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; downloading images...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; starting...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Plugin registry pod bootstrap &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; scheduling...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; downloading images...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; starting...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Che pod bootstrap &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; scheduling...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; downloading images...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; starting...done. &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Retrieving Che Server URL...http://che-che.192.168.99.123.nip.io &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Che status check Command server:start has completed successfully. &lt;/pre&gt; &lt;p&gt;For more details and options, see the official Che 7 documentation.&lt;/p&gt; &lt;h2&gt;Create and configure a Camel K-ready workspace&lt;/h2&gt; &lt;p&gt;To create and configure your Camel K-ready workspace, you first need to create a workspace from the Camel K stack. At the end of the previous command&amp;#8217;s log, the URL to access the Che instance is provided after &amp;#8220;Retrieving Che Server URL&amp;#8230;&amp;#8221;&lt;/p&gt; &lt;p&gt;Open this URL in a browser. Select the &lt;strong&gt;Apache Camel K&lt;/strong&gt; stack and then click the &lt;strong&gt;Create &amp;#38; Open&lt;/strong&gt; button, which opens the page shown in Figure 1:&lt;/p&gt; &lt;div id="attachment_671547" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-671547" class="wp-image-671547 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-05-03-1024x559.png" alt="The Eclipse Che workspace creation page." width="640" height="349" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-05-03-1024x559.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-05-03-300x164.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-05-03-768x419.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-671547" class="wp-caption-text"&gt;Figure 1: Create your new Apache Camel K workspace in Eclipse Che.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Wait for the workspace to be ready. This process can take several minutes, depending on your internet connection&amp;#8217;s speed.&lt;/p&gt; &lt;p&gt;Next, you need to inject the kubeconfig login context into the Che workspace. For that, you can return to your host and call:&lt;/p&gt; &lt;pre&gt;$ chectl workspace:inject -k&lt;/pre&gt; &lt;p&gt;Ensure that the injection for &lt;code&gt;vscode-camelkXXX&lt;/code&gt; is a success. This command provides output like this:&lt;/p&gt; &lt;pre&gt; &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify if namespace che exists &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Verify if the workspaces is running &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; Injecting configurations &lt;span style="color: #c4a000;"&gt;↓&lt;/span&gt; injecting kubeconfig into container che-machine-execcc7 [skipped] &lt;span style="color: #555753;"&gt; → the container doesn't support file injection&lt;/span&gt; &lt;span style="color: #c4a000;"&gt;↓&lt;/span&gt; injecting kubeconfig into container theia-idenue [skipped] &lt;span style="color: #555753;"&gt; → kubeconfig already exists in the target container&lt;/span&gt; &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; injecting kubeconfig into container vscode-xmlcem...done. &lt;span style="color: #c4a000;"&gt;↓&lt;/span&gt; injecting kubeconfig into container vscode-apache-camelt7t [skipped] &lt;span style="color: #555753;"&gt; → kubeconfig already exists in the target container&lt;/span&gt; &lt;span style="color: #4e9a06;"&gt;&amp;#x2714;&lt;/span&gt; injecting kubeconfig into container vscode-camelkrbj...done.&lt;/pre&gt; &lt;p&gt;Now, install Camel K. In the right column, click &lt;strong&gt;My Workspace&lt;/strong&gt; to expand the panel. Then, expand the &lt;strong&gt;Plugins -&amp;#62; vscode-camelkXXX&lt;/strong&gt; tree. Click &lt;strong&gt;New terminal&lt;/strong&gt;, then type:&lt;/p&gt; &lt;pre&gt;$ kamel install&lt;/pre&gt; &lt;p&gt;The result is shown in Figure 2:&lt;/p&gt; &lt;div id="attachment_671557" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-671557" class="wp-image-671557 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-24-11-1024x703.png" alt="Eclipse Che showing your newly created terminal." width="640" height="439" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-24-11-1024x703.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-24-11-300x206.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-24-11-768x527.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-24-11.png 1094w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-671557" class="wp-caption-text"&gt;Figure 2: Create your new terminal inside your new workspace&amp;#8217;s &lt;strong&gt;Plugins&lt;/strong&gt;.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Deploy and automatically redeploy a Camel K integration&lt;/h2&gt; &lt;p&gt;The &lt;a href="https://github.com/apache/camel-k/tree/master/examples" target="_blank" rel="noopener noreferrer"&gt;official Camel K examples&lt;/a&gt; are populated by default. You can open, for instance, &lt;code&gt;hello.xml&lt;/code&gt;&lt;em&gt;.&lt;/em&gt; Notice that the integration simply logs &amp;#8220;Hello World!!!&amp;#8221; every three seconds.&lt;/p&gt; &lt;p&gt;Right-click on this example in the &lt;strong&gt;Projects&lt;/strong&gt; panel. Select &lt;strong&gt;Start Apache Camel K integration&lt;/strong&gt; and then &lt;strong&gt;Dev mode &amp;#8211; Apache Camel integration in Dev mode&lt;/strong&gt;, as shown in Figure 3:&lt;/p&gt; &lt;div id="attachment_671567" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-671567" class="wp-image-671567 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/startInDevMode-1024x530.gif" alt="The sequence for deploying hello world." width="640" height="331" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/startInDevMode-1024x530.gif 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/startInDevMode-300x155.gif 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/startInDevMode-768x398.gif 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-671567" class="wp-caption-text"&gt;Figure 3: Deploy the Hello World example.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Wait several seconds (or minutes) for the first deployment. Again, how long this takes depends on your internet connection&amp;#8217;s speed.&lt;/p&gt; &lt;p&gt;When ready, go to the &lt;strong&gt;Output&lt;/strong&gt; panel. Select &lt;strong&gt;Apache Camel K&lt;/strong&gt; output, which should display &amp;#8220;Hello World!!!&amp;#8221; logged every three seconds, as shown in Figure 4:&lt;/p&gt; &lt;div id="attachment_671577" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-671577" class="wp-image-671577 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-37-37-1024x559.png" alt="Eclipse Che showing the Apache Camel K output log." width="640" height="349" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-37-37-1024x559.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-37-37-300x164.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-37-37-768x419.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-671577" class="wp-caption-text"&gt;Figure 4: View the output log.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Modify the &lt;code&gt;hello.xml&lt;/code&gt; file&amp;#8217;s content. For instance, you might change the constant to &amp;#8220;Hello World from Che!!!&amp;#8221; The integration is automatically redeployed in a few milliseconds, as you can see in Figure 5:&lt;/p&gt; &lt;div id="attachment_671587" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-671587" class="wp-image-671587 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-39-07-1024x559.png" alt="Eclipse Che showing the updated results" width="640" height="349" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-39-07-1024x559.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-39-07-300x164.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/Screenshot-from-2020-01-02-14-39-07-768x419.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-671587" class="wp-caption-text"&gt;Figure 5: The output log now shows the updated results from the automatic redeployment.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Because the Che workspace reuses the VS Code extension, you can use all of the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-camelk" target="_blank" rel="noopener noreferrer"&gt;Tooling for Apache Camel K VS Code extension&lt;/a&gt;&amp;#8216;s features. See our previous article on &lt;a href="https://developers.redhat.com/blog/2019/09/30/sending-a-telegram-with-apache-camel-k-and-visual-studio-code/"&gt;how to create an integration sending a Telegram&lt;/a&gt; to take this example further.&lt;/p&gt; &lt;h2&gt;Known limitations&lt;/h2&gt; &lt;p&gt;There are two major known limitations. The login for the Camel K instance needs to be redone on each workspace startup, and on a remote cluster, special rights need to be given so you can install and access the Camel K instance.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F24%2Fapache-camel-k-development-inside-eclipse-che-iteration-1%2F&amp;#38;linkname=Apache%20Camel%20K%20development%20inside%20Eclipse%20Che%3A%20Iteration%201" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F24%2Fapache-camel-k-development-inside-eclipse-che-iteration-1%2F&amp;#38;linkname=Apache%20Camel%20K%20development%20inside%20Eclipse%20Che%3A%20Iteration%201" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F24%2Fapache-camel-k-development-inside-eclipse-che-iteration-1%2F&amp;#38;linkname=Apache%20Camel%20K%20development%20inside%20Eclipse%20Che%3A%20Iteration%201" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F24%2Fapache-camel-k-development-inside-eclipse-che-iteration-1%2F&amp;#38;linkname=Apache%20Camel%20K%20development%20inside%20Eclipse%20Che%3A%20Iteration%201" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F24%2Fapache-camel-k-development-inside-eclipse-che-iteration-1%2F&amp;#38;linkname=Apache%20Camel%20K%20development%20inside%20Eclipse%20Che%3A%20Iteration%201" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F24%2Fapache-camel-k-development-inside-eclipse-che-iteration-1%2F&amp;#38;linkname=Apache%20Camel%20K%20development%20inside%20Eclipse%20Che%3A%20Iteration%201" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F24%2Fapache-camel-k-development-inside-eclipse-che-iteration-1%2F&amp;#38;linkname=Apache%20Camel%20K%20development%20inside%20Eclipse%20Che%3A%20Iteration%201" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F24%2Fapache-camel-k-development-inside-eclipse-che-iteration-1%2F&amp;#038;title=Apache%20Camel%20K%20development%20inside%20Eclipse%20Che%3A%20Iteration%201" data-a2a-url="https://developers.redhat.com/blog/2020/01/24/apache-camel-k-development-inside-eclipse-che-iteration-1/" data-a2a-title="Apache Camel K development inside Eclipse Che: Iteration 1"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/24/apache-camel-k-development-inside-eclipse-che-iteration-1/"&gt;Apache Camel K development inside Eclipse Che: Iteration 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sI5gl7fkbpk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Eclipse Che 7.6.0 release provides a new stack for Apache Camel K integration development. This release is the first iteration to give a preview of what is possible. If you like what you see, shout it out, and more will surely come. This article details how to test this release on a local instance deployed [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/24/apache-camel-k-development-inside-eclipse-che-iteration-1/"&gt;Apache Camel K development inside Eclipse Che: Iteration 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">669797</post-id><dc:creator>Aurélien Pupier</dc:creator><dc:date>2020-01-24T08:00:31Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/24/apache-camel-k-development-inside-eclipse-che-iteration-1/</feedburner:origLink></entry><entry><title>Editing, debugging, and GitHub in Red Hat CodeReady Workspaces 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YljvUquRev0/" /><category term="Developer Tools" /><category term="Modern App Dev" /><category term="CodeReady Workspaces" /><category term="debugging" /><category term="github" /><category term="Golang" /><author><name>Don Schenck</name></author><id>https://developers.redhat.com/blog/?p=656177</id><updated>2020-01-23T20:19:35Z</updated><published>2020-01-23T20:19:35Z</published><content type="html">&lt;p&gt;In a previous article, I showed how to &lt;a href="https://developers.redhat.com/blog/?p=654277"&gt;get Red Hat CodeReady Workspaces 2.0 (CRW) up and running&lt;/a&gt; with a workspace available for use. This time, we will go through the edit-debug-push (to GitHub) cycle. This walk-through will simulate a real-life development effort.&lt;/p&gt; &lt;p&gt;To start, you&amp;#8217;ll need to fork a GitHub repository. The &lt;a href="https://github.com/redhat-developer-demos/qotd.git" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;Quote Of The Day&lt;/code&gt;&lt;/a&gt; repo contains a microservice written in Go that we&amp;#8217;ll use for this article. Don&amp;#8217;t worry if you&amp;#8217;ve never worked with Go. This is a simple program and we&amp;#8217;ll only change one line of code.&lt;/p&gt; &lt;p&gt;After you fork the repo, make note of (or copy) your fork&amp;#8217;s URL. We&amp;#8217;ll be using that information in a moment.&lt;/p&gt; &lt;p&gt;&lt;span id="more-656177"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Create a Go workspace&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll use the pre-configured Go workspace as a basis to create our workspace in CRW. We will make a change to the configuration before we launch the workspace by removing the default demo GitHub reference and, instead, adding our forked repo&amp;#8217;s URL. Doing this means that our workspace will open with our code in front of us and ready for editing, debugging, and pushing back to our repo.&lt;/p&gt; &lt;p&gt;From the &lt;strong&gt;Workspaces&lt;/strong&gt; section, select the &lt;strong&gt;Add Workspace&lt;/strong&gt; button. When you are presented with the &lt;strong&gt;New Workspace&lt;/strong&gt; page, you will see a list of built-in workspaces. Select the &lt;strong&gt;Go&lt;/strong&gt; workspace. While you&amp;#8217;re on that page, also remove the &lt;strong&gt;example&lt;/strong&gt; project. Both actions are shown in Figure 1:&lt;/p&gt; &lt;div id="attachment_656377" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-656377" class="wp-image-656377 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-1-1024x540.png" alt="Select the Go workspace and remove the example project." width="640" height="338" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-1-1024x540.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-1-300x158.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-1-768x405.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-656377" class="wp-caption-text"&gt;Figure 1: Select the correct language workspace and remove the &lt;strong&gt;example&lt;/strong&gt; project.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The next step is to get the source code we want for this project. To do this, connect to your GitHub account by choosing the &lt;strong&gt;GitHub&lt;/strong&gt; option in the &lt;strong&gt;Add or import Project&lt;/strong&gt; section, as shown in Figure 2:&lt;/p&gt; &lt;div id="attachment_656397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-656397" class="wp-image-656397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-3-1024x549.png" alt="Connect your GitHub account to a CRW workspace" width="640" height="343" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-3-1024x549.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-3-300x161.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-3-768x412.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-656397" class="wp-caption-text"&gt;Figure 2: Connect your GitHub account to the new workspace.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After connecting, you will be presented with a list of every GitHub project to which you have rights. Note that the list is in alphabetical order by project.&lt;/p&gt; &lt;p&gt;Select the &lt;strong&gt;qotd&lt;/strong&gt; project—the one you forked earlier—and click the &lt;strong&gt;Add&lt;/strong&gt; button to add this project to your workspace definition, as shown in Figure 3:&lt;/p&gt; &lt;div id="attachment_656407" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-656407" class="wp-image-656407 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-4-1024x529.png" alt="Select qotd and click Add" width="640" height="331" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-4-1024x529.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-4-300x155.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-4-768x397.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-656407" class="wp-caption-text"&gt;Figure 3: Add the &lt;strong&gt;qotd&lt;/strong&gt; project to your workspace definition.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You should see a result similar to what&amp;#8217;s shown in Figure 4:&lt;/p&gt; &lt;div id="attachment_656417" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-656417" class="wp-image-656417 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-5-1024x530.png" alt="Your new workspace definition" width="640" height="331" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-5-1024x530.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-5-300x155.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/new-go-workspace-5-768x397.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-656417" class="wp-caption-text"&gt;Figure 4: Your new workspace definition.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;When you reach this point, click the &lt;strong&gt;CREATE &amp;#38; OPEN&lt;/strong&gt; button (that huge green one) to get things rolling.&lt;/p&gt; &lt;p&gt;We have ignition. You&amp;#8217;ll notice something really cool at this point. CRW automagically opens the &lt;strong&gt;README.md&lt;/strong&gt; file in the editor, as shown in Figure 5:&lt;/p&gt; &lt;div id="attachment_656427" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-656427" class="wp-image-656427 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/qotd-1-1024x388.png" alt="CRW editor with README.md displayed" width="640" height="243" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/qotd-1-1024x388.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/qotd-1-300x114.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/qotd-1-768x291.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/qotd-1.png 1035w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-656427" class="wp-caption-text"&gt;Figure 5: The editor opens your project.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This is a small thing, but I think it&amp;#8217;s nice because it means that you start with an understanding of the project. Well played, &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;CodeReady Workspaces&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Explore the CRW IDE&lt;/h2&gt; &lt;p&gt;Before proceeding, let&amp;#8217;s label important parts of the IDE:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The file explorer, which is shown in Figure 5 in the previous section.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;Debug&lt;/strong&gt; section, which is shown in Figure 6.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;SOURCE CONTROL:GIT&lt;/strong&gt; section, which is shown in Figure 7:&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_656457" style="width: 412px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-656457" class="wp-image-656457 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/debug-open.png" alt="The CRW Debug section." width="402" height="790" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/debug-open.png 402w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/debug-open-153x300.png 153w" sizes="(max-width: 402px) 100vw, 402px" /&gt;&lt;p id="caption-attachment-656457" class="wp-caption-text"&gt;Figure 6: The CRW &lt;strong&gt;Debug&lt;/strong&gt; section.&lt;/p&gt;&lt;/div&gt; &lt;div id="attachment_656467" style="width: 412px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-656467" class="wp-image-656467 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/source-control-open.png" alt="The CRW Source Control (GitHub) section." width="402" height="296" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/source-control-open.png 402w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/source-control-open-300x221.png 300w" sizes="(max-width: 402px) 100vw, 402px" /&gt;&lt;p id="caption-attachment-656467" class="wp-caption-text"&gt;Figure 7: The CRW Source Control (GitHub) section.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;A single click on a file in the file explorer enables editing. In our case, we will wait on the editing until later in this article. For now, let&amp;#8217;s run the program, which brings up an interesting point: debugging.&lt;/p&gt; &lt;h2&gt;Debug your code&lt;/h2&gt; &lt;p&gt;To debug our code, we first need to set up a debugging configuration and then set a breakpoint. After all, you (I mean, &lt;em&gt;your colleague&lt;/em&gt;) might have introduced an error. Start by selecting &lt;strong&gt;View&lt;/strong&gt; -&amp;#62; &lt;strong&gt;Debug Console&lt;/strong&gt; from the menu bar at the top. Doing this will allow us to see messages as debugging starts. While being able to see this information is not necessary, it is nice to have.&lt;/p&gt; &lt;p&gt;Next, click on the &lt;strong&gt;Debug&lt;/strong&gt; icon on the left to access the &lt;strong&gt;Debug&lt;/strong&gt; section. At the top of the section, open the configuration drop-down. It initially reads &lt;strong&gt;No Configurations&lt;/strong&gt; but we&amp;#8217;re going to change that setting. Select &lt;strong&gt;Add Configuration&lt;/strong&gt; and then the &lt;strong&gt;Go: Launch package &lt;/strong&gt;option. The file &lt;strong&gt;launch.json&lt;/strong&gt; will be presented in the IDE.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the &lt;strong&gt;Go: Launch project&lt;/strong&gt; option does not appear, it&amp;#8217;s probably because you selected the wrong stack when you created the workspace. Don&amp;#8217;t ask how I know this.&lt;/p&gt; &lt;p&gt;Change the line that reads &lt;code&gt;"program": "${workspaceFolder}"&lt;/code&gt; to &lt;code&gt;"program": "${current.project.path}/main.go"&lt;/code&gt;, as shown in Figure 9:&lt;/p&gt; &lt;div id="attachment_656487" style="width: 310px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-656487" class="wp-image-656487 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/go-launch-package-300x38.png" alt="Edit the launch file to add a project debug configuration." width="300" height="38" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/go-launch-package-300x38.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/go-launch-package.png 658w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;p id="caption-attachment-656487" class="wp-caption-text"&gt;Figure 9: Edit the launch file to add a project debug configuration.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click on the &lt;strong&gt;File Explorer&lt;/strong&gt; icon on the left and open the &lt;strong&gt;main.go&lt;/strong&gt; file. Click in the margin to the right of line number 16 to set a breakpoint, as shown in Figure 10:&lt;/p&gt; &lt;div id="attachment_656347" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-656347" class="wp-image-656347 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/breakpoint-set-1024x554.png" alt="Set your breakpoint in the File Explorer." width="640" height="346" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/breakpoint-set-1024x554.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/breakpoint-set-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/breakpoint-set-768x416.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/breakpoint-set.png 1417w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-656347" class="wp-caption-text"&gt;Figure 10: Set your breakpoint.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Start the engine&lt;/h2&gt; &lt;p&gt;Now, finally, we are ready to run our code. Click on the &lt;strong&gt;Debug&lt;/strong&gt; icon and then click the green right-facing arrow by the configuration drop-down to start the program in Debug mode. Or, just press &lt;strong&gt;F5&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;When the application starts, you will get messages related to the port number and the service&amp;#8217;s URL. Select the option offered in each prompt. A small browser window will open in the IDE. If you receive an error stating that the application is not ready, simply refresh the browser until the application starts to run. Note that you can click the small icon to launch your default browser outside of the IDE.&lt;/p&gt; &lt;p&gt;You will see your breakpoint highlighted. Feel free to poke around the debug values to the left, including local variables. When ready, click the &lt;strong&gt;Continue&lt;/strong&gt; button (blue arrow) in the debug control area.&lt;/p&gt; &lt;p&gt;When finished debugging, press the &lt;strong&gt;Stop&lt;/strong&gt; button (red box) in the debug control area.&lt;/p&gt; &lt;p&gt;Go ahead and change a quote in the program, then run in Debug mode again. When you are satisfied that your change works, we&amp;#8217;re ready to update our repo. For a developer, this feels like home. Edit, run, debug, edit, run, debug, etc. Press &lt;strong&gt;F11&lt;/strong&gt; at any time to run your browser in full-screen mode and you&amp;#8217;ll soon forget that you&amp;#8217;re using the web.&lt;/p&gt; &lt;h2&gt;Commit your code&lt;/h2&gt; &lt;p&gt;Click on the &lt;strong&gt;Source Control&lt;/strong&gt; icon to view the &lt;strong&gt;Source Control&lt;/strong&gt; area. In the message area, enter text to describe the change you just made. This information is used by the &lt;code&gt;git commit -m&lt;/code&gt; command. Then, click the commit checkbox above the message area. This is the &lt;code&gt;git commit&lt;/code&gt; command, and it uses the text you entered in the message area.&lt;/p&gt; &lt;h2&gt;Push back&lt;/h2&gt; &lt;p&gt;Now to fulfill the cycle and push our changes to our GitHub repo. Remember: We&amp;#8217;re working in a browser, so there is no &lt;strong&gt;File&lt;/strong&gt; -&amp;#62; &lt;strong&gt;Save&lt;/strong&gt; option.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; But there &lt;em&gt;could&lt;/em&gt; be. We have been doing everything in Ephemeral Mode (as noted at the bottom of your IDE), but CRW does support saving files to storage if you configured a Persistent Volume. That&amp;#8217;s another article for another time.&lt;/p&gt; &lt;p&gt;Select the ellipses (&lt;strong&gt;&amp;#8230;&lt;/strong&gt;) in the source control area and choose the &lt;strong&gt;Push&lt;/strong&gt; option. This action will prompt you for your GitHub username and password. After you have supplied these correctly, the code will be pushed to GitHub to update your repo.&lt;/p&gt; &lt;p&gt;Hop over to your browser and navigate to the GitHub repo, where you&amp;#8217;ll see your changes. You did it. You pulled down code, edited it, debugged it, and pushed it back to GitHub. And of course, you have a GitHub webhook configured to automatically kick off your CI/CD pipeline now, right?&lt;/p&gt; &lt;p&gt;Right?&lt;/p&gt; &lt;p&gt;That question looks like YABP—Yet Another Blog Post—is in order: GitHub to CI/CD using OpenShift Pipelines.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you shut down your workspace and then, later, start it again, it will pull down the current code. In other words, if someone else made changes during the interim, you&amp;#8217;ll see them. It&amp;#8217;s a small feature, but it&amp;#8217;s nice to have an automatic &lt;code&gt;git pull&lt;/code&gt; before you start work.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s next?&lt;/h2&gt; &lt;p&gt;I briefly mentioned a &lt;em&gt;stack&lt;/em&gt;. In the third and final article of this three-part series, I&amp;#8217;ll show you how to build a custom stack, which is a way to customize workspaces to your specific needs.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fediting-debugging-and-github-in-red-hat-codeready-workspaces-2%2F&amp;#38;linkname=Editing%2C%20debugging%2C%20and%20GitHub%20in%20Red%20Hat%20CodeReady%20Workspaces%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fediting-debugging-and-github-in-red-hat-codeready-workspaces-2%2F&amp;#38;linkname=Editing%2C%20debugging%2C%20and%20GitHub%20in%20Red%20Hat%20CodeReady%20Workspaces%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fediting-debugging-and-github-in-red-hat-codeready-workspaces-2%2F&amp;#38;linkname=Editing%2C%20debugging%2C%20and%20GitHub%20in%20Red%20Hat%20CodeReady%20Workspaces%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fediting-debugging-and-github-in-red-hat-codeready-workspaces-2%2F&amp;#38;linkname=Editing%2C%20debugging%2C%20and%20GitHub%20in%20Red%20Hat%20CodeReady%20Workspaces%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fediting-debugging-and-github-in-red-hat-codeready-workspaces-2%2F&amp;#38;linkname=Editing%2C%20debugging%2C%20and%20GitHub%20in%20Red%20Hat%20CodeReady%20Workspaces%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fediting-debugging-and-github-in-red-hat-codeready-workspaces-2%2F&amp;#38;linkname=Editing%2C%20debugging%2C%20and%20GitHub%20in%20Red%20Hat%20CodeReady%20Workspaces%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fediting-debugging-and-github-in-red-hat-codeready-workspaces-2%2F&amp;#38;linkname=Editing%2C%20debugging%2C%20and%20GitHub%20in%20Red%20Hat%20CodeReady%20Workspaces%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fediting-debugging-and-github-in-red-hat-codeready-workspaces-2%2F&amp;#038;title=Editing%2C%20debugging%2C%20and%20GitHub%20in%20Red%20Hat%20CodeReady%20Workspaces%202" data-a2a-url="https://developers.redhat.com/blog/2020/01/23/editing-debugging-and-github-in-red-hat-codeready-workspaces-2/" data-a2a-title="Editing, debugging, and GitHub in Red Hat CodeReady Workspaces 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/23/editing-debugging-and-github-in-red-hat-codeready-workspaces-2/"&gt;Editing, debugging, and GitHub in Red Hat CodeReady Workspaces 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YljvUquRev0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In a previous article, I showed how to get Red Hat CodeReady Workspaces 2.0 (CRW) up and running with a workspace available for use. This time, we will go through the edit-debug-push (to GitHub) cycle. This walk-through will simulate a real-life development effort. To start, you&amp;#8217;ll need to fork a GitHub repository. The Quote Of [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/23/editing-debugging-and-github-in-red-hat-codeready-workspaces-2/"&gt;Editing, debugging, and GitHub in Red Hat CodeReady Workspaces 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">656177</post-id><dc:creator>Don Schenck</dc:creator><dc:date>2020-01-23T20:19:35Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/23/editing-debugging-and-github-in-red-hat-codeready-workspaces-2/</feedburner:origLink></entry><entry><title>This Week in JBoss: January 23, 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GRu9hc7P2vQ/this-week-in-jboss-january-23-2020" /><category term="byteman" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="ide" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="jbossws" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="wildfly 19" scheme="searchisko:content:tags" /><author><name>Donald Naro</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_january_23_2020</id><updated>2020-01-23T12:11:01Z</updated><published>2020-01-23T12:11:01Z</published><content type="html">&lt;!-- [DocumentBodyStart:41ac270d-7f1a-4ea3-8e3b-796a50f65be8] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Welcome to my first ever edition of the JBoss editorial. I'm pretty excited to be sharing news from the JBoss community and look forward to bringing you highlights and latest developments. Let's go!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Did someone say MicroProfile?&lt;/h2&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://microprofile.io/" rel="nofollow"&gt;Eclipse MicroProfile&lt;/a&gt; provide specifications for Enterprise Java microservices and this week we bring you news of two recent announcements&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;WildFly 19.0.0.Beta1, which is available since last week, includes implementations of all of the MicroProfile 3.2 specifications. It's an important achievement for the WildFly team and Brian Stansberry provides all the details and shouts out in his &lt;a class="jive-link-external-small" href="https://wildfly.org/news/2020/01/17/WildFly19-Beta-Released/" rel="nofollow"&gt;MicroProfile 3.2 in WildFly 19.0.0.Beta1&lt;/a&gt; announcement.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Quarkus as well recently &lt;a class="jive-link-external-small" href="https://quarkus.io/blog/quarkus-eclipse-microprofile-3-2-compatible/" rel="nofollow"&gt;announced compatibility with MicroProfile 3.2&lt;/a&gt;, another milestone for the project right on the heels of the 1.1.0.Final release.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Quarkus Tooling and RealWorld Demo&lt;/h2&gt;&lt;p&gt;Looking for dedicated Quarkus integration in your IDE? Check out the cleverly titled&amp;#160; on the &lt;a class="jive-link-external-small" href="https://quarkus.io/blog/march-of-ides/" rel="nofollow"&gt;March of IDEs post&lt;/a&gt; Quarkus blog.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;span&gt;If you're a fan of the RealWorld specification for fullstack app demos, then have a look at Diego Camara's &lt;a class="jive-link-external-small" href="https://github.com/diegocamara/realworld-api-quarkus" rel="nofollow"&gt;Quarkus example app&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Developer Articles and How To's&lt;/h2&gt;&lt;p&gt;S&amp;eacute;bastien Blanc shows us how to use &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/01/23/using-kubernetes-configmaps-to-define-your-quarkus-applications-properties/" rel="nofollow"&gt;ConfigMaps to define properties for Quarkus applications on Kubernetes&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;William Henry also breaks down &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/" rel="nofollow"&gt;Podman and Buildah for Docker users and shows how to migrate&lt;/a&gt;, answering lots of technical questions on the way.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Evangelist's Corner&lt;/h2&gt;&lt;p&gt;&lt;span&gt;JBoss evangelists release new demos and content to help people discover and use the latest version of the JBoss Community projects. Since the last editorial, Eric D. Schabell released an article that explains how to get a fully installed and configured Red Hat Decision Manager on your local machine. Learn &lt;a class="jive-link-external-small" href="https://planet.jboss.org/post/how_to_install_red_hat_decision_manager_7_5_in_minutes" rel="nofollow"&gt;how to install Red Hat Decision Maker in 7.5 minutes&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Releases&lt;/h2&gt;&lt;p&gt;Apart from WildFly 19.0.0Beta1 that we've already mentioned, here is a roundup of all the latest releases:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a class="jive-link-external-small" href="https://byteman.jboss.org/downloads.html" rel="nofollow"&gt;Byteman 4.0.10&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a class="jive-link-external-small" href="http://jbossws.blogspot.com/2020/01/jbossws-540final-is-released.html" rel="nofollow"&gt;JBoss Web Services 5.4.0.Final&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;That's all for this edition of the Editorial, please join us next time as we continue our journey through JBoss Communities in search of interesting articles and news.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:41ac270d-7f1a-4ea3-8e3b-796a50f65be8] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GRu9hc7P2vQ" height="1" width="1" alt=""/&gt;</content><summary>Welcome to my first ever edition of the JBoss editorial. I'm pretty excited to be sharing news from the JBoss community and look forward to bringing you highlights and latest developments. Let's go!   Did someone say MicroProfile? Eclipse MicroProfile provide specifications for Enterprise Java microservices and this week we bring you news of two recent announcements   WildFly 19.0.0.Beta1, which i...</summary><dc:creator>Donald Naro</dc:creator><dc:date>2020-01-23T12:11:01Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2020/01/23/this-week-in-jboss-january-23-2020</feedburner:origLink></entry><entry><title>How to maintain stable build and deployment performance on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-_hIb6PgPQU/" /><category term="CI/CD" /><category term="Containers" /><category term="Kubernetes" /><category term="DevOps" /><category term="performance tuning" /><category term="Red Hat OpenShift" /><author><name>Daein Park</name></author><id>https://developers.redhat.com/blog/?p=666597</id><updated>2020-01-23T08:00:14Z</updated><published>2020-01-23T08:00:14Z</published><content type="html">&lt;p&gt;In this article, I will introduce helpful, common tips for managing reliable builds and deployments on &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. If you have experienced a sudden performance degradation for builds and deployments on OpenShift, it might be helpful to troubleshoot your cluster. We will start by reviewing the whole process, from build to deployment, and then cover each aspect in more detail. We will use Red Hat OpenShift 4.2 (Kubernetes 1.14) for this purpose.&lt;span id="more-666597"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Processes from build to deployment&lt;/h2&gt; &lt;p&gt;When a CI/CD process or a user triggers the build for a pod deployment, the processes will proceed as shown in Figure 1, which is simplified for readability:&lt;/p&gt; &lt;div id="attachment_666617" style="width: 610px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-666617" class="wp-image-666617" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/build_deploy_performance-300x194.png" alt="The process workflow from building to deploying a pod." width="600" height="388" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/build_deploy_performance-300x194.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/build_deploy_performance-768x497.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/build_deploy_performance.png 821w" sizes="(max-width: 600px) 100vw, 600px" /&gt;&lt;p id="caption-attachment-666617" class="wp-caption-text"&gt;Figure 1: The process workflow from building to deploying a pod.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As you can see, Kubernetes does not control all of these processes, but the main processes for build and deployment depend on the user’s application build configuration and the dependencies on external systems. We can split out each process by which component has responsibility for managing things as shown in Figure 2:&lt;/p&gt; &lt;div id="attachment_666637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-666637" class="wp-image-666637 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/components_table-1024x258.png" alt="Build deployment process" width="640" height="161" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/components_table-1024x258.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/components_table-300x76.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/components_table-768x194.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/components_table.png 1412w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-666637" class="wp-caption-text"&gt;Figure 2: The build deployment process.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Kubernetes&lt;/h3&gt; &lt;p&gt;In this process, Kubernetes provides resources based on the &lt;code&gt;BuildConfig&lt;/code&gt; and &lt;code&gt;DeploymentConfig&lt;/code&gt; files. Usually, a build and deploy will fail before starting their work if there is any trouble handling resources, such as volume mount failure, scheduling pending, and so on. You can usually find the reasons for these failures easily in the event logs.&lt;/p&gt; &lt;p&gt;So, if both the build and deployment are successful—even though they took longer—this is not a Kubernetes scheduling and control problem. For clarifying the performance issue, we should ensure that &lt;code&gt;BuildConfig&lt;/code&gt; and &lt;code&gt;DeploymentConfig&lt;/code&gt; are configured with enough resource requests as in the following examples.&lt;/p&gt; &lt;p&gt;Here is a quick sample &lt;code&gt;BuildConfig&lt;/code&gt; for this scenario:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: BuildConfig metadata: name: sample-build spec: resources: requests: cpu: 500m memory: 256Mi &lt;/pre&gt; &lt;p&gt;Here is a quick sample &lt;code&gt;DeploymentConfig&lt;/code&gt; for this scenario:&lt;/p&gt; &lt;pre&gt;apiVersion: apps.openshift.io/v1 kind: DeploymentConfig metadata: name: sample-deployment spec: template: spec: containers: - image: test-image name: container1 resources: requests: cpu: 100m memory: 200Mi &lt;/pre&gt; &lt;p&gt;In general, you should allocate resources large enough to build and deploy reliably after testing, keeping in mind that this is not a minimum resource setting. For instance, if you set &lt;code&gt;resources.requests.cpu: 32m&lt;/code&gt;, Kubernetes will assign more CPU time through the &lt;code&gt;cpu.shares&lt;/code&gt; control group parameter as follows:&lt;/p&gt; &lt;pre&gt;# oc describe pod test-1-abcde | grep -E 'Node:|Container ID:|cpu:' Node: worker-0.ocp.example.local/x.x.x.x Container ID: cri-o://XXX... Container ID ...XXX cpu: 32m # oc get pod test-5-8z5lq -o yaml | grep -E '^ uid:' uid: YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY worker-0 ~# cat \ /sys/fs/cgroup/cpu,cpuacct/kubepods.slice/kubepods-burstable.slice/kubepods-burstable-podYYYYYYYY_YYYY_YYYY_YYYY_YYYYYYYYYYYY.slice/crio-XXX... Container ID ...XXX.scope/cpu.shares 32 &lt;/pre&gt; &lt;p&gt;As of OpenShift 4.1, you can manage cluster-wide build defaults including the above resource requests through the &lt;code&gt;Build&lt;/code&gt; resource. Refer to &lt;a href="https://docs.openshift.com/container-platform/4.2/builds/build-configuration.html" target="_blank" rel="noopener noreferrer"&gt;Build configuration resources&lt;/a&gt; for more details:&lt;/p&gt; &lt;pre&gt;apiVersion: config.openshift.io/v1 kind: Build metadata: name: cluster spec: buildDefaults: defaultProxy: httpProxy: http://proxy.com httpsProxy: https://proxy.com noProxy: internal.com env: - name: envkey value: envvalue resources: limits: cpu: 100m memory: 50Mi requests: cpu: 10m memory: 10Mi buildOverrides: nodeSelector: selectorkey: selectorvalue operator: Exists &lt;/pre&gt; &lt;p&gt;Additionally, you should add &lt;code&gt;kube-reserved&lt;/code&gt; and &lt;code&gt;system-reserved&lt;/code&gt; to provide more reliable scheduling and minimize node resource overcommitment in all nodes. Refer to &lt;a href="https://docs.openshift.com/container-platform/4.2/nodes/nodes/nodes-nodes-resources-configuring.html" target="_blank" rel="noopener noreferrer"&gt;Allocating resources for nodes in an OpenShift Container Platform cluster&lt;/a&gt; for more details:&lt;/p&gt; &lt;pre&gt;apiVersion: machineconfiguration.openshift.io/v1 kind: KubeletConfig metadata: name: set-allocatable spec: machineConfigPoolSelector: matchLabels: custom-kubelet: small-pods kubeletConfig: systemReserved: cpu: 500m memory: 512Mi kubeReserved: cpu: 500m memory: 512Mi &lt;/pre&gt; &lt;p&gt;If you have more than 1,000 nodes, you can consider tuning &lt;a href="https://kubernetes.io/docs/concepts/scheduling/scheduler-perf-tuning/" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;percentageOfNodesToScore&lt;/code&gt;&lt;/a&gt; for scheduler performance tuning. This feature&amp;#8217;s state is beta as of Kubernetes 1.14 (OpenShift 4.2).&lt;/p&gt; &lt;h3&gt;Image registry&lt;/h3&gt; &lt;p&gt;This component works on image push and pull tasks for both builds and deployments. First of all, you should consider adopting appropriate storage and network resources to process the required I/O and traffic for the maximum concurrent image pull and push you estimated. Usually, object storage is recommended because it is atomic, meaning the data is either written completely or not written at all, even if there is a failure during the write. Object storage can also share a volume with other duplicated registries in ReadWriteMany (RWX) mode. Further information can be found in the &lt;a href="https://docs.openshift.com/container-platform/4.2/scalability_and_performance/optimizing-storage.html#recommended-configurable-storage-technology_persistent-storage" target="_blank" rel="noopener noreferrer"&gt;Recommended configurable storage technology&lt;/a&gt; documentation.&lt;/p&gt; &lt;p&gt;You can also consider &lt;code&gt;IfNotPresent&lt;/code&gt; &lt;a href="https://docs.openshift.com/container-platform/4.2/openshift_images/managing-images/image-pull-policy.html" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;ImagePullPolicy&lt;/code&gt;&lt;/a&gt; to reduce the pull/push workload as follows:&lt;/p&gt; &lt;div id="attachment_666627" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-666627" class="wp-image-666627 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/image_policy_table-1024x231.png" alt="The image policy table." width="640" height="144" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/image_policy_table-1024x231.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/image_policy_table-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/image_policy_table-768x173.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/image_policy_table.png 1408w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-666627" class="wp-caption-text"&gt;Figure 3: The image policy table.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Build pod&lt;/h3&gt; &lt;p&gt;When a build pod is created and starts to build an application, all control passes to the build pod, and the work is configured through build configuration parameters defined by a &lt;code&gt;BuildConfig&lt;/code&gt;. How you choose to create your application and provide source content to build and operate on it all affects build performance.&lt;/p&gt; &lt;p&gt;For instance, if you build a Java or Nodejs application using &lt;code&gt;maven&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt;, you might download many libraries from their respective external repositories. If at that time the repositories or access path have performance issues, then the build process can fail or be delayed more than usual. This factor means that if your build depends on an external service or resource, it&amp;#8217;s easy to suffer negative effects from that setup regardless of your local system’s status. So, it might be best to consider creating a local repository (&lt;code&gt;maven&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, and so on) to ensure reliable and stable performance for your builds. Or, you can reuse previously downloaded dependencies and previously built artifacts by using &lt;a href="https://docs.openshift.com/container-platform/4.2/builds/build-strategies.html#builds-strategy-s2i-incremental-builds_build-strategies" target="_blank" rel="noopener noreferrer"&gt;Source-to-Image (S2I) incremental builds&lt;/a&gt; if your image registry performance is enough to pull previously-built images for every incremental build:&lt;/p&gt; &lt;pre&gt;strategy: sourceStrategy: from: kind: "ImageStreamTag" name: "incremental-image:latest" incremental: true &lt;/pre&gt; &lt;p&gt;Building with a &lt;code&gt;Dockerfile&lt;/code&gt; can optimize layered caches to decrease image layer pull and push time. In the following example, using this method decreased the update size because splitting into layers is based on change frequency. To rephrase it, any unchanged layers are cached, as shown in Figure 4:&lt;/p&gt; &lt;div id="attachment_666607" style="width: 610px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-666607" class="wp-image-666607" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/layer_cache-300x150.png" alt="An example layer cache." width="600" height="300" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/layer_cache-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/layer_cache-768x384.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/layer_cache.png 801w" sizes="(max-width: 600px) 100vw, 600px" /&gt;&lt;p id="caption-attachment-666607" class="wp-caption-text"&gt;Figure 4: An example layer cache.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s look at an example. This image has small layers, but the 35M layer is always updated when the image build is conducted:&lt;/p&gt; &lt;pre&gt;# podman history 31952aa275b8 ID CREATED CREATED BY SIZE COMMENT 31952aa275b8 52 seconds ago /bin/sh -c #(nop) ENTRYPOINT ["tail","-f",... 0B missing 57 seconds ago /bin/sh -c #(nop) COPY resources /resources 35.7MB missing 5 weeks ago 20.48kB missing 5 weeks ago # podman push docker-registry.default.svc:5000/openshift/test:latest Getting image source signatures Copying blob 3698255bccdb done Copying blob a066f3d73913 skipped: already exists Copying blob 26b543be03e2 skipped: already exists Copying config 31952aa275 done Writing manifest to image destination Copying config 31952aa275 done Writing manifest to image destination Storing signatures &lt;/pre&gt; &lt;p&gt;But this image has more layers than the one above, the 5M layer is the only one that is updated. Other unchanged layers are cached:&lt;/p&gt; &lt;pre&gt;# buildah bud --layers . STEP 1: FROM registry.redhat.io/ubi8/ubi-minimal:latest STEP 2: COPY resources/base /resources/base --&amp;#62; Using cache da63ee05ff89cbec02e8a6ac89c287f550337121b8b401752e98c53b22e4fea7 STEP 3: COPY resources/extra /resources/extra --&amp;#62; Using cache 9abc7eee3e705e4999a7f2ffed09d388798d21d1584a5f025153174f1fa161b3 STEP 4: COPY resources/user /resources/user b9cef39450b5e373bd4da14f446b6522e0b46f2aabac2756ae9ce726d240e011 STEP 5: ENTRYPOINT ["tail","-f","/dev/null"] STEP 6: COMMIT 72cc8f59b6cd546d8fb5c3c5d82321b6d14bf66b91367bc5ca403eb33cfcdb15 # podman tag 72cc8f59b6cd docker-registry.default.svc:5000/openshift/test:latest # podman history 72cc8f59b6cd ID CREATED CREATED BY SIZE COMMENT 72cc8f59b6cd About a minute ago /bin/sh -c #(nop) ENTRYPOINT ["tail","-f",... 0B missing About a minute ago /bin/sh -c #(nop) COPY resources/user /res... 5.245MB missing 2 minutes ago /bin/sh -c #(nop) COPY resources/extra /re... 20.07MB missing 2 minutes ago /bin/sh -c #(nop) COPY resources/base /res... 10.49MB missing 5 weeks ago 20.48kB missing 5 weeks ago 107.1MB Imported from - # podman push docker-registry.default.svc:5000/openshift/test:latest Getting image source signatures Copying blob aa6eb6fda701 done Copying blob 26b543be03e2 skipped: already exists Copying blob a066f3d73913 skipped: already exists Copying blob 822ae69b69df skipped: already exists Copying blob 7c5c2aefa536 skipped: already exists Copying config 72cc8f59b6 done Writing manifest to image destination Copying config 72cc8f59b6 done Writing manifest to image destination Storing signatures &lt;/pre&gt; &lt;p&gt;You should check your build logs when troubleshooting the build process because Kubernetes can only detect whether a build pod completed successfully or not.&lt;/p&gt; &lt;h3&gt;Application pod&lt;/h3&gt; &lt;p&gt;Like the build pod, all control passes to the application pod once the application pod is created, so most of the work is done through the application implementation if the application depends on external services and resources to initialize, such as DB connection pooling, KVS, and other API connections. And you should also watch out whether &lt;code&gt;Security Software&lt;/code&gt; is running on your hosts. It can usually affect all processes on the hosts, not only deployment.&lt;/p&gt; &lt;p&gt;For instance, if DB server that uses connection pooling has performance issues or reaches the maximum connection count while the application pod is starting, the application pod initialization can be delayed more than expected. So, if your application has external dependencies, you should also check to see whether they are running well. And if &lt;code&gt;Readiness Probes&lt;/code&gt; and &lt;code&gt;Liveness Probes&lt;/code&gt; are configured for your application pod, you should set &lt;code&gt;initialDelaySeconds&lt;/code&gt; and &lt;code&gt;periodSeconds&lt;/code&gt; large enough for your application pod to initialize. If your &lt;code&gt;initialDelaySeconds&lt;/code&gt; and &lt;code&gt;periodSeconds&lt;/code&gt; are too short to check the application states, your application will be restarted repeatedly and might result in a delay or failure to deploy the application pod (you can find more on this issue in &lt;a href="https://docs.openshift.com/container-platform/4.2/nodes/containers/nodes-containers-health.html" target="_blank" rel="noopener noreferrer"&gt;Monitoring container health&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: Pod metadata: labels: test: liveness name: liveness-http spec: containers: - name: liveness-http image: k8s.gcr.io/liveness args: - /server livenessProbe: httpGet: # host: my-host # scheme: HTTPS path: /healthz port: 8080 httpHeaders: - name: X-Custom-Header value: Awesome initialDelaySeconds: 15 timeoutSeconds: 1 name: liveness &lt;/pre&gt; &lt;h2&gt;Build and deployment in parallel&lt;/h2&gt; &lt;p&gt;Lastly, I recommend that you keep concurrent build and deployment tasks in one cycle as appropriate numbers for suppressing resource issues. As you can see here, these tasks are chained with other tasks and they will iterate automatically through their life cycles, so there would be more workload than you expected. Usually, the compile (build) and application initialization (deployment) processes are CPU-intensive tasks, so you might need to evaluate how many concurrent build and deployment tasks are possible to ensure you have a stable cluster before scheduling new tasks.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We took a look at how each part affects each other within build and deployment processes. I focused on the configuration and other information related only to build and deployment performance topics in the hopes that this information will help your understanding regarding the interaction between the build and deployment phases of applications on OpenShift. I hope this information is helpful for your stable system management. Thank you for reading.&lt;/p&gt; &lt;h2&gt;References&lt;/h2&gt; &lt;p&gt;Two additional references you might find useful are &lt;a href="https://docs.openshift.com/container-platform/4.2/builds/understanding-image-builds.html" target="_blank" rel="noopener noreferrer"&gt;OpenShift Container Platform 4.2 Documentation &amp;#8211; Understanding image builds&lt;/a&gt; and &lt;a href="https://kubernetes.io/docs/concepts/scheduling/scheduler-perf-tuning/" target="_blank" rel="noopener noreferrer"&gt;Scheduler Performance Tuning&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fhow-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20maintain%20stable%20build%20and%20deployment%20performance%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fhow-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20maintain%20stable%20build%20and%20deployment%20performance%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fhow-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20maintain%20stable%20build%20and%20deployment%20performance%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fhow-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20maintain%20stable%20build%20and%20deployment%20performance%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fhow-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20maintain%20stable%20build%20and%20deployment%20performance%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fhow-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20maintain%20stable%20build%20and%20deployment%20performance%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fhow-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20maintain%20stable%20build%20and%20deployment%20performance%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F23%2Fhow-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift%2F&amp;#038;title=How%20to%20maintain%20stable%20build%20and%20deployment%20performance%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/01/23/how-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift/" data-a2a-title="How to maintain stable build and deployment performance on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/23/how-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift/"&gt;How to maintain stable build and deployment performance on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-_hIb6PgPQU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this article, I will introduce helpful, common tips for managing reliable builds and deployments on Red Hat OpenShift. If you have experienced a sudden performance degradation for builds and deployments on OpenShift, it might be helpful to troubleshoot your cluster. We will start by reviewing the whole process, from build to deployment, and then [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/23/how-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift/"&gt;How to maintain stable build and deployment performance on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">666597</post-id><dc:creator>Daein Park</dc:creator><dc:date>2020-01-23T08:00:14Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/23/how-to-maintain-stable-build-and-deployment-performance-on-red-hat-openshift/</feedburner:origLink></entry></feed>
